#
# Copyright (c) 2019 Cloudera, Inc. All rights reserved.
#

#
# A reference configuration for deploying a cluster that utilizes Cloudera's
# Shared Data Experience (SDX). Please refer to
# https://www.cloudera.com/products/sdx.html for more detailed information.
#

#
# Cluster name
#
name: "SDX-Azure Cluster 1"

#
# The environment and deployment name will be generated by default based on the cluster
# name. Another cluster can be bootstrapped under the same deployment by specifying the
# existing environment and deployment name along with a new cluster name. Note that when
# terminating with a configuration file, the deployment is only terminated if there are
# no other clusters under the deployment. Also, the external databases are only terminated
# if there are no other components (deployments or clusters) using the external database.
#

# environmentName: "SDX-Azure Environment"
# deploymentName: "SDX-Azure Deployment"

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

provider {
    type: azure

    #
    # ID of Azure region to use. NOTE: region must support Premium Storage
    # See: https://azure.microsoft.com/en-us/regions/#services
    #

    region: "region_REPLACE_ME"

    #
    # Azure Cloud Environment to use. Valid values are:
    #   - azure
    #   - azure-us-government
    #   - azure-germany
    #
    azureCloudEnvironment: "azureCloudEnvironment_REPLACE_ME"

    #
    # Azure Management URL. (Now deprecated, use azureCloudEnvironment instead.
    #
    # mgmtUrl: "https://management.core.windows.net/"
    #

    #
    # Azure Active Directory Subscription ID.
    #

    subscriptionId: "subscriptionId_REPLACE_ME"

    #
    # Tenant ID (from AAD)
    #

    tenantId: "tenantId_REPLACE_ME"

    #
    # Azure Active Directory Application Client ID.
    #

    clientId: "clientId_REPLACE_ME"

    #
    # Client Secret
    #

    clientSecret: "clientSecret_REPLACE_ME"
}

#
# SSH credentials to use to connect to the instances
#

ssh {
    username: "username_REPLACE_ME"
    privateKey: """-----BEGIN RSA PRIVATE KEY-----
privateKey_REPLACE_ME
-----END RSA PRIVATE KEY-----"""
}

#
# Common variable definitions
#
# These are the key / value pairs used to define instance templates. They are defined here and
# referenced throughout this config file.
# More about HOCON substitution: https://github.com/typesafehub/config/blob/master/HOCON.md#substitutions
#
# The format of this section:
#   - base: represents the core config fields that are common to all nodes
#   - master-base: represents the core config fields that are common to all master nodes
#   - master-1: represents the core config fields that are common to master-1 nodes
#   - master-2: represents the core config fields that are common to master-2 nodes
#   - worker: represents the core config fields that are common to worker nodes
#   - edge: represents the core config fields that are common to edge nodes
#
#
# Instance Template Breakdown
# An instance template configuration consists of the following fields. Unless otherwise specified,
# all fields are required.
#
# - image: The image ID used for instances is an alias defined in the plugin configuration file.
#
# - type: The VM type. See the Azure RA for more detail.
#
# - computeResourceGroup: Resource Group for the deployment.  The Resource Group you specify must
#   exist within the region you selected.
#   See: https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/
#
# - networkSecurityGroupResourceGroup: The Resource Group for the Network Security Group. The
#   Resource Group you specify must exist within the region you selected.
#   See: https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/
#
# - networkSecurityGroup: The Network Security Group for this instance type, this has to be
#   within the networkSecurityGroupResourceGroup. NSG configuration allows you to limit access to
#   the VM with firewall-like rules.
#   See: https://azure.microsoft.com/en-us/documentation/articles/virtual-networks-nsg/
#
# - virtualNetworkResourceGroup: The Resource Group for the Virtual Network. The Resource Group you
#   specify must exist within the region you selected and should be the same for all instances that
#   will be used in the same cluster.
#   See: https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/
#
# - virtualNetwork: The Azure Virtual Network that will be used, this has to be within the
#   virtualNetworkResourceGroup and should be the same for all instances that will be used in the
#   same cluster.
#   See: https://azure.microsoft.com/en-us/documentation/services/virtual-network/
#
# - subnetName: The name of the Subnet that will be used, this has to be within the virtualNetwork.
#
# - instanceNamePrefix: Prefix for VM name and hostname of the VM. The VM name will have the
#   folloing format:
#       instanceNamePrefix-{UUID}
#   where {UUID} is generated by the Cloudera Altus Director server.
#
# - hostFqdnSuffix: Hostname FQDN Suffix. This is the DNS domain you configured in your custom DNS
#   server. Example values are: cdh-cluster.internal, cluster.your-company-name.com. The host FQDN
#   is configured on the VMs with the following format:
#       {instanceNamePrefix}-{truncated-UUID}.hostFqdnSuffix
#
# - availabilitySet: Availability Set for this instance type.  Machines within the same availability
#   set will have staggared maintanance times. With a default availability set configuration no more
#   than 1/5 machines will be offline at a time (rounded up).
#   See: https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-manage-availability/
#   Sharing Availability Set between master and worker nodes is strongly not recommended.
#
# - publicIP: Should this instance type have Azure Public IP Address and DNS Label?  If Yes, the
#   machine will have a publically resolvable hostname with the folling format:
#       {instanceNamePrefix}-{UUID}.{region}.coudapp.azure.com
#   Allowed values: Yes, No
#
# - storageAccountType: The storage account type to use. The dataDiskSize parameter should be
#   updated based on the storage account type used.
#   The current allowed values are:
#       - Premium_LRS
#       - Standard_LRS
#   See the RA for the supported ways to use standard storage:
#   http://www.cloudera.com/documentation/other/reference-architecture/PDF/cloudera_ref_arch_azure.pdf
#
# - dataDiskCount: The number of data drives. The size can be specified with `dataDiskSize`
#   Data drives are mounted on /data0 .. /data[n]
#       /data0 - Dedicated Log Device
#   For Masters-1:
#       /data1 - HDFS JournalNode Data
#       /data2 - Zookeeper Data / DataLog
#       /data3 - NameNode Data
#   For Masters-2:
#       /data1 - HDFS JournalNode Data
#       /data2 - Zookeeper Data / DataLog
#   For Workers:
#       /data1 .. /data[n] will be used for HDFS data
#
# - dataDiskSize: The size of each data drive.
#   For disks allocated in a premium storage account, only the following GB values are allowed:
#       512 (P20 disk)
#       1023 (P30 disk) - for backwards compatibility
#       1024 (P30 disk)
#       2048 (P40 disk)
#       4095 (P50 disk)
#   For disks allocated in a standard storage account, any size between 1 and 4095 inclusive can
#   be used.
#   See https://azure.microsoft.com/en-us/documentation/articles/storage-introduction/ and
#   https://azure.microsoft.com/en-us/documentation/articles/storage-premium-storage/
#
# - managedDisks: Whether or not to use managed disks.
#   Managed Disks are enabled by default. To use Storage Accounts set this field to "No".
#   In order for managed disks to be used, the availability set must be aligned to use
#   managed disks. For additional details about managed disks see:
#   https://docs.microsoft.com/en-us/azure/virtual-machines/windows/managed-disks-overview
#
# - useCustomManagedImage: Whether or not to use a custom (managed) image.
#   Custom images are only supported when using Managed Disks (`managedDisks` must be `Yes`).
#
# - customImagePlan: The custom VM image purchase plan.
#   The purchase plan for the original VM image used to create the custom image. This can be:
#       - an empty string ("")
#       - a string with the format /publisher/<publisher>/product/<product>/name/<name>
#
# - tags (optional): Additional tags to help label resources within Azure
#
# - bootstrapScripts: The bootstrap scripts (see the bootstrap-script section)
#

common-instanceTemplate {

    # Core config fields that are common to all node types
    base {
        type: STANDARD_D32S_V3
        image: cloudera-centos-67-latest
        networkSecurityGroupResourceGroup: "networkSecurityGroupResourceGroup_REPLACE_ME"
        networkSecurityGroup: "networkSecurityGroup_REPLACE_ME"
        virtualNetworkResourceGroup: "virtualNetworkResourceGroup_REPLACE_ME"
        virtualNetwork: "virtualNetwork_REPLACE_ME"
        subnetName: "subnetName_REPLACE_ME"
        hostFqdnSuffix: "hostFqdnSuffix_REPLACE_ME"
        tags {
            owner: ${?USER}
        }
    }

    # Core config fields that are common to all master nodes
    master-base {
        computeResourceGroup: "masterBase_computeResourceGroup_REPLACE_ME"
        availabilitySet: "master_availabilitySet_REPLACE_ME"
        instanceNamePrefix: "masterBase_instanceNamePrefix_REPLACE_ME"
        storageAccountType: "Premium_LRS"
        dataDiskSize: 512
        managedDisks: Yes
        publicIP: No
    }

    # Config fields for master-1 nodes
    master-1 {
        dataDiskCount: 4
    }

    # Config fields for master-2 nodes
    master-2 {
        dataDiskCount: 3
    }

    # Config fields for worker nodes
    worker {
        computeResourceGroup: "worker_computeResourceGroup_REPLACE_ME"
        availabilitySet: "worker_availabilitySet_REPLACE_ME"
        instanceNamePrefix: "worker_instanceNamePrefix_REPLACE_ME"
        storageAccountType: "Standard_LRS"
        dataDiskCount: 11
        dataDiskSize: 1024
        managedDisks: Yes
        publicIP: No
    }

    # Config fields for edge nodes
    edge {
        computeResourceGroup: "edge_computeResourceGroup_REPLACE_ME"
        availabilitySet: "edge_availabilitySet_REPLACE_ME"
        instanceNamePrefix: "edge_instanceNamePrefix_REPLACE_ME"
        storageAccountType: "Standard_LRS"
        dataDiskCount: 1
        dataDiskSize: 512
        managedDisks: Yes
        # Change this to Yes to allow accessing edge/CM nodes via public IP
        publicIP: No
    }
}

#
# Bootstrap script
#
# See azure.reference.conf for general information about bootstrap scripts and
# pre-terminate scripts.
#
# The os-generic bootstrap script will be run after the VM boots up for the first time. This must
# be used to set up preconditions for successful cluster deployment. Director will restart the
# host after the bootstrap script has run.
#
# The example below is an os-generic script that supports these OSes:
#   - CentOS 6
#   - CentOS 7
#   - RHEL 6
#   - RHEL 7
#
# The script prepares the OS for cluster installation. It also configures a dhclient or
# NetworkManager hook (depending on OS) to register the A record and PTR record with the DNS server
# configured for the VNET to satisfy proper forward and reverse DNS resolution. Azure's default DNS
# currently does not support Reverse Lookup on private IP Addresses, which is a requirement for
# CDH. See the following link for an example BIND setup to satisfy this requirement:
# http://www.cloudera.com/documentation/director/latest/topics/director_get_started_azure_ddns.html
#
# The scrip also sets required settings for RHEL.
#

bootstrap-script {
    os-generic : """#!/bin/sh

#
# Copyright (c) 2017 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This script will bootstrap these OSes:
#   - CentOS 6
#   - CentOS 7
#   - RHEL 6
#   - RHEL 7
#
# Notes and notable differences between OSes:
#   - CentOS and RHEL 6 use dhclient
#   - CentOS and RHEL 7 use NetworkManager
#


#
# Functions
#

#
# CentOS and RHEL 6 use dhclient. Add a script to be automatically invoked when interface comes up.
# Function not indented so EOF works.
#
dhclient_6()
{
# dhclient-exit-hooks explained in dhclient-script man page: http://linux.die.net/man/8/dhclient-script
# cat a here-doc representation of the hooks to the appropriate file
cat > /etc/dhcp/dhclient-exit-hooks <<"EOF"
#!/bin/bash
printf "\ndhclient-exit-hooks running...\n\treason:%s\n\tinterface:%s\n" "${reason:?}" "${interface:?}"
# only execute on the primary nic
if [ "$interface" != "eth0" ]
then
    exit 0;
fi
# when we have a new IP, perform nsupdate
if [ "$reason" = BOUND ] || [ "$reason" = RENEW ] || [ "$reason" = REBIND ] || [ "$reason" = REBOOT ]
then
    printf "\tnew_ip_address:%s\n" "${new_ip_address:?}"
    host=$(hostname -s)
    domain=$(nslookup $(grep -i nameserver /etc/resolv.conf | head -n 1 | cut -d ' ' -f 2) | grep -i name | cut -d ' ' -f 3 | cut -d '.' -f 2- | rev | cut -c 2- | rev)
    IFS='.' read -ra ipparts <<< "$new_ip_address"
    ptrrec="$(printf %s "$new_ip_address." | tac -s.)in-addr.arpa"
    nsupdatecmds=$(mktemp -t nsupdate.XXXXXXXXXX)
    resolvconfupdate=$(mktemp -t resolvconfupdate.XXXXXXXXXX)
    echo updating resolv.conf
    grep -iv "search" /etc/resolv.conf > "$resolvconfupdate"
    echo "search $domain" >> "$resolvconfupdate"
    cat "$resolvconfupdate" > /etc/resolv.conf
    echo "Attempting to register $host.$domain and $ptrrec"
    {
        echo "update delete $host.$domain a"
        echo "update add $host.$domain 600 a $new_ip_address"
        echo "send"
        echo "update delete $ptrrec ptr"
        echo "update add $ptrrec 600 ptr $host.$domain"
        echo "send"
    } > "$nsupdatecmds"
    nsupdate "$nsupdatecmds"
fi
#done
exit 0;
EOF
chmod 755 /etc/dhcp/dhclient-exit-hooks
service network restart

# Confirm DNS record has been updated, retry if update did not work
i=0
until [ $i -ge 5 ]
do
    sleep 5
    i=$((i+1))
    hostname | nslookup && break
    service network restart
done

if [ $i -ge 5 ]; then
    echo "DNS update failed"
    exit 1
fi
}


centos_6()
{
    echo "CentOS 6"

    # execute the CentOS / RHEL 6 dhclient-exit-hooks setup
    dhclient_6
}


rhel_6()
{
    echo "RHEL 6"

    # rewrite SELINUX config to disabled and turn off enforcement
    sed -i.bak "s/^SELINUX=.*$/SELINUX=disabled/" /etc/selinux/config
    setenforce 0
    # stop firewall and disable
    service iptables stop
    chkconfig iptables off
    # update config to disable IPv6 and disable
    echo "# Disable IPv6" >> /etc/sysctl.conf
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
    echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
    sysctl -w net.ipv6.conf.all.disable_ipv6=1
    sysctl -w net.ipv6.conf.default.disable_ipv6=1

    # execute the CentOS / RHEL 6 dhclient-exit-hooks setup
    dhclient_6
}


#
# CentOS and RHEL 7 use NetworkManager. Add a script to be automatically invoked when interface comes up.
# Function not indented so EOF works.
#
networkmanager_7()
{
cat > /etc/NetworkManager/dispatcher.d/12-register-dns <<"EOF"
#!/bin/bash
# NetworkManager Dispatch script
# Deployed by Cloudera Altus Director Bootstrap
#
# Expected arguments:
#    $1 - interface
#    $2 - action
#
# See for info: http://linux.die.net/man/8/networkmanager

# Register A and PTR records when interface comes up
# only execute on the primary nic
if [ "$1" != "eth0" ] || [ "$2" != "up" ]
then
    exit 0;
fi

# when we have a new IP, perform nsupdate
new_ip_address="$DHCP4_IP_ADDRESS"

host=$(hostname -s)
domain=$(nslookup $(grep -i nameserver /etc/resolv.conf | head -n 1 | cut -d ' ' -f 2) | grep -i name | cut -d ' ' -f 3 | cut -d '.' -f 2- | rev | cut -c 2- | rev)
IFS='.' read -ra ipparts <<< "$new_ip_address"
ptrrec="$(printf %s "$new_ip_address." | tac -s.)in-addr.arpa"
nsupdatecmds=$(mktemp -t nsupdate.XXXXXXXXXX)
resolvconfupdate=$(mktemp -t resolvconfupdate.XXXXXXXXXX)
echo updating resolv.conf
grep -iv "search" /etc/resolv.conf > "$resolvconfupdate"
echo "search $domain" >> "$resolvconfupdate"
cat "$resolvconfupdate" > /etc/resolv.conf
echo "Attempting to register $host.$domain and $ptrrec"
{
    echo "update delete $host.$domain a"
    echo "update add $host.$domain 600 a $new_ip_address"
    echo "send"
    echo "update delete $ptrrec ptr"
    echo "update add $ptrrec 600 ptr $host.$domain"
    echo "send"
} > "$nsupdatecmds"
nsupdate "$nsupdatecmds"
exit 0;
EOF
chmod 755 /etc/NetworkManager/dispatcher.d/12-register-dns
service network restart

# Confirm DNS record has been updated, retry if update did not work
i=0
until [ $i -ge 5 ]
do
    sleep 5
    i=$((i+1))
    hostname | nslookup && break
    service network restart
done

if [ $i -ge 5 ]; then
    echo "DNS update failed"
    exit 1
fi
}


centos_7()
{
    echo "CentOS 7"

    # execute the CentOS / RHEL 7 network manager setup
    networkmanager_7
}


rhel_7()
{
    echo "RHEL 7"

    # rewrite SELINUX config to disable and turn off enforcement
    sed -i.bak "s/^SELINUX=.*$/SELINUX=disabled/" /etc/selinux/config
    setenforce 0
    # stop firewall and disable
    systemctl stop iptables
    systemctl iptables off
    # RHEL 7 uses firewalld
    systemctl stop firewalld
    systemctl disable firewalld
    # Disable tuned so it does not overwrite sysctl.conf
    service tuned stop
    systemctl disable tuned
    # Disable chrony so it does not conflict with ntpd installed by Director
    systemctl stop chronyd
    systemctl disable chronyd
    # update config to disable IPv6 and disable
    echo "# Disable IPv6" >> /etc/sysctl.conf
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
    echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
    # swappiness is set by Director in /etc/sysctl.conf
    # Poke sysctl to have it pickup the config change.
    sysctl -p

    # execute the CentOS / RHEL 7 network manager setup
    networkmanager_7
}


#
# Main workflow
#

# ensure user is root
if [ "$(id -u)" -ne 0 ]
then
    echo "Please run as root."
    exit 1
fi

# find the OS and release
os=""
major_release=""

# if it's there, use lsb_release
if rpm -q redhat-lsb
then
    os=$(lsb_release -si)
    major_release=$(lsb_release -sr | cut -d '.' -f 1)

# if lsb_release isn't installed, use /etc/redhat-release
else
    if grep "CentOS.* 6\\." /etc/redhat-release
    then
        os="CentOS"
        major_release="6"
    fi

    if grep "CentOS.* 7\\." /etc/redhat-release
    then
        os="CentOS"
        major_release="7"
    fi

    if grep "Red Hat Enterprise Linux Server release 6\\." /etc/redhat-release
    then
        os="RedHatEnterpriseServer"
        major_release="6"
    fi

    if grep "Red Hat Enterprise Linux Server release 7\\." /etc/redhat-release
    then
        os="RedHatEnterpriseServer"
        major_release="7"
    fi
fi

echo "OS: $os $major_release"

# select the OS and run the appropriate setup script
not_supported_msg="OS $os $major_release is not supported."
if [ "$os" = "CentOS" ]; then
    if [ "$major_release" = "6" ]; then
        centos_6
    elif [ "$major_release" = "7" ]; then
        centos_7
    else
        echo "$not_supported_msg"
        exit 1
    fi

elif [ "$os" = "RedHatEnterpriseServer" ]; then
    if [ "$major_release" = "6" ]; then
        rhel_6
    elif [ "$major_release" = "7" ]; then
        rhel_7
    else
        echo "$not_supported_msg"
        exit 1
    fi
else
    echo "$not_supported_msg"
    exit 1
fi
"""
} # end bootstrap-script

#
# Instance Templates
#

instances {

    master {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.master-base.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.master-base.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.master-base.availabilitySet}
        publicIP: ${?common-instanceTemplate.master-base.publicIP}
        storageAccountType: ${?common-instanceTemplate.master-base.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.master-1.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.master-base.dataDiskSize}
        managedDisks: ${?common-instanceTemplate.master-base.managedDisks}
        tags: ${?common-instanceTemplate.base.tags}
        bootstrapScripts: [ ${?bootstrap-script.os-generic} ]
    }

    worker {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.worker.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.worker.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.worker.availabilitySet}
        publicIP: ${?common-instanceTemplate.worker.publicIP}
        storageAccountType: ${?common-instanceTemplate.worker.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.worker.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.worker.dataDiskSize}
        managedDisks: ${?common-instanceTemplate.worker.managedDisks}
        tags: ${?common-instanceTemplate.base.tags}
        bootstrapScripts: [ ${?bootstrap-script.os-generic} ]
    }

    edge {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.edge.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.edge.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.edge.availabilitySet}
        publicIP: ${?common-instanceTemplate.edge.publicIP}
        storageAccountType: ${?common-instanceTemplate.edge.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.edge.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.edge.dataDiskSize}
        managedDisks: ${?common-instanceTemplate.edge.managedDisks}
        tags: ${?common-instanceTemplate.base.tags}
        bootstrapScripts: [ ${?bootstrap-script.os-generic} ]
    }

} # End instance templates

#
# Configuration for Cloudera Manager. Launchpad can use an existing instance
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.edge} {
        tags {
            application: "Cloudera Manager 6"
        }
    }

    #
    # Install the unlimited strength JCE policy files for higher levels of encryption.
    # Prior to setting this to true, confirm that you understand the legal ramifications
    # of using unlimited JCE policy files in your country.
    #

    # unlimitedJce: true

    #
    # Kerberos Credentials
    #

    #
    # An administrative Kerberos account capable of creating principals on the KDC that
    # Cloudera Manager will be using. This will typically be in the format:
    #    Principal@YOUR.KDC.REALM
    krbAdminUsername: "REPLACE-ME"

    # The password for the administrative Kerberos account.
    krbAdminPassword: "REPLACE-ME"

    # For Cloudera's SDX, Cloudera Manager 5.13+ is required.
    repository: "https://archive.cloudera.com/cm6/6.3/redhat7/yum/"

    # To share data across clusters, an object store like ADLS must be configured.

    externalAccounts {
        SDXAccount {
            type: ADLS_AD_SVC_PRINC_AUTH
            configs {
                adls_client_id: "ADLS-CLIENT-ID-REPLACE-ME"
                adls_tenant_id: "ADLS-TENANT-ID-REPLACE-ME"
                adls_client_key: "ADLS-CLIENT-KEY-REPLACE-ME"
            }
        }
    }

    configs {
        CLOUDERA_MANAGER {
            enable_api_debug: true
            custom_banner_html: "Managed by Cloudera Altus Director"

            #
            # Kerberos Configurations
            #

            # The type of KDC Cloudera Manager will be using. Valid values are "MIT KDC"
            # and "Active Directory"
            KDC_TYPE: "Active Directory"

            # The KDC host name or IP address.
            KDC_HOST: "REPLACE-ME"

            # The security realm that your KDC uses. This will be of the format of a fully
            # qualified domain name:
            #    YOUR.KDC.REALM
            SECURITY_REALM: "REPLACE-ME"

            # The Active Directory KDC domain. Only applicable to Active Directory KDCs. This
            # will be in the format of an X.500 Directory Specification:
            #    DC=domain,DC=example,DC=com
            AD_KDC_DOMAIN: "REPLACE-ME"

            # Allow Cloudera Manager to deploy Kerberos configurations to hosts. This should
            # be set to true unless you have an alternate mechanism to generate or retrieve the
            # Kerberos configuration on your Cloudera Manager node instances.
            KRB_MANAGE_KRB5_CONF: true

            # The encryption types your KDC supports. Some of those listed below will require the
            # unlimited strength JCE policy files.
            KRB_ENC_TYPES: "aes256-cts aes128-cts des3-hmac-sha1 arcfour-hmac des-hmac-sha1 des-cbc-md5 des-cbc-crc"

            # There are many more optional Kerberos configuration options available to Cloudera Manager.
            # Please refer to the Kerberos section on
            # http://www.cloudera.com/documentation/enterprise/properties/5-13-x/topics/cm_props_cmserver.html
            # for more details.
        }
    }
}

#
# Cluster description
#

cluster {

    # For Cloudera's SDX, CDH 5.13+ is required.

    parcelRepositories: ["https://archive.cloudera.com/cdh6/6.3/parcels/"]

    products {
        CDH: 6.3
    }

    # To take full advantage of SDX, we recommend installing
    # the following services at minimum:
    # * ADLS_CONNECTOR
    # * HDFS
    # * HIVE
    # * HUE
    # * IMPALA
    # * OOZIE
    # * SENTRY
    # * YARN
    # * ZOOKEEPER

    services: [ADLS_CONNECTOR, HDFS, HIVE, HUE, IMPALA, OOZIE, SENTRY, YARN, ZOOKEEPER]

    # External databases for the HIVE and SENTRY services must be set up for SDX
    # prior to setting up a cluster. For best results, host the databases on RDS.

    databases {
        HIVE {
            type: hive-db-type-REPLACE-ME
            host: hive-db-host-REPLACE-ME
            port: hive-db-port-REPLACE-ME
            user: hive-db-username-REPLACE-ME
            password: hive-db-password-REPLACE-ME
            name: hive-db-name-REPLACE-ME
        }
        SENTRY {
            type: sentry-db-type-REPLACE-ME
            host: sentry-db-host-REPLACE-ME
            port: sentry-db-port-REPLACE-ME
            user: sentry-db-username-REPLACE-ME
            password: sentry-db-password-REPLACE-ME
            name: sentry-db-password-REPLACE-ME
        }
    }

    # The ADLS_CONNECTOR connector must be configured to point to a configured external
    # account.

    configs {
        ADLS_CONNECTOR {
            cloud_account: SDXAccount

            # If you do not have Kerberos and Apache Sentry setup, you'll need to set
            # the key distribution policy to UNSECURE in order for HIVE to work properly.
            # key_distribution_policy: UNSECURE
        }
    }

    masters {
      count: 1
      instance: ${instances.master} {
        tags {
          group: masters
        }
      }
      roles {
        HDFS: [NAMENODE]
        HIVE: [HIVEMETASTORE, HIVESERVER2]
        HUE: [HUE_SERVER]
        IMPALA: [CATALOGSERVER]
        OOZIE: [OOZIE_SERVER]
        SENTRY: [SENTRY_SERVER]
        YARN: [RESOURCEMANAGER]
        ZOOKEEPER: [SERVER]
      }
      configs {
        HIVE {
          HIVEMETASTORE {
            # This is necessary for HIVEMETASTORE to propagate metadata changes to SENTRY
            hive_enable_db_notification: true
          }
        }
      }
    }

    workers {
      count: 3
      instance: ${instances.worker} {
        tags {
          group: workers
        }
      }
      roles {
        HDFS: [DATANODE]
        IMPALA: [IMPALAD]
        YARN: [NODEMANAGER]
      }
    }
}
